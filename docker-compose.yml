services:
  backend-flask:
    environment:
      FRONTEND_URL: "http://127.0.0.1:3000"
      BACKEND_URL: "http://127.0.0.1:4567"
      OTEL_EXPORTER_OTLP_ENDPOINT: "https://api.honeycomb.io"
      OTEL_EXPORTER_OTLP_HEADERS: "x-honeycomb-team=${HONEYCOMB_API_KEY}"
      OTEL_SERVICE_NAME: "backend-flask"
      AWS_XRAY_URL: "127.0.0.1:4567"
      AWS_XRAY_DAEMON_ADDRESS: "xray-daemon:2000"
      AWS_DEFAULT_REGION: "${AWS_REGION}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      ROLLBAR_ACCESS_TOKEN: "${ROLLBAR_ACCESS_TOKEN}"
      AWS_COGNITO_USER_POOL_ID: "us-west-1_8rNnJi8IJ"
      AWS_COGNITO_USER_POOL_CLIENT_ID: "crgknkk1a8dov3r8ere6c347q"
    build: ./backend-flask
    ports:
      - "4567:4567"
    volumes:
      - ./backend-flask:/backend-flask
  frontend-react-js:
    environment:
      REACT_APP_BACKEND_URL: "http://127.0.0.1:4567"
      REACT_APP_AWS_PROJECT_REGION: "${AWS_REGION}"
      REACT_APP_AWS_COGNITO_REGION: "${AWS_REGION}"
      REACT_APP_AWS_USER_POOLS_ID: "us-west-1_8rNnJi8IJ"
      REACT_APP_CLIENT_ID: "crgknkk1a8dov3r8ere6c347q"
    build: ./frontend-react-js
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-react-js:/frontend-react-js
  # db:
  #   image: postgres:13-alpine
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=password
  #   ports:
  #     - '5431:5432'
  #   volumes:
  #     - db:/var/lib/postgresql/data
  # xray-daemon:
  #   image: "amazon/aws-xray-daemon"
  #   environment:
  #     AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  #     AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  #     AWS_REGION: "us-west-1"
  #   command:
  #     - "xray -o -b xray-daemon:2000"
  #   ports:
  #     - 2000:2000/udp
  # dynamodb-local:
  #   # https://stackoverflow.com/questions/67533058/persist-local-dynamodb-data-in-volumes-lack-permission-unable-to-open-databa
  #   # We needed to add user:root to get this working.
  #   user: root
  #   command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
  #   image: "amazon/dynamodb-local:latest"
  #   container_name: dynamodb-local
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - "./docker/dynamodb:/home/dynamodblocal/data"
  #   working_dir: /home/dynamodblocal

# the name flag is a hack to change the default prepend folder
# name when outputting the image names
networks:
  internal-network:
    driver: bridge
    name: cruddur

# volumes:
#   db:
#     driver: local
